(let foldl
  (\ [ _, val, [] ] val)
	(\ [ fun, val, (Cons x xs) ] (foldl fun (fun val x) xs))
)

(let insert
	(\ [value, []] [value])
	(\ [value, (Cons x xs)] (if (<= value x) (Cons value (Cons x xs)) (Cons x (insert value xs))))
)

(let filter
  (\ [_, []] [])
	(\ [fun, (Cons x xs)] (if (fun x) (Cons x (filter fun xs)) (filter fun xs)))
)

(let sort
	(\ [[]] [])
	(\ [(Cons x xs)] (insert x (sort xs)))
)

(let qsort
  (\ [ [] ] [])
	(\ [ (Cons x xs) ] 
	  (++
		  (qsort (filter (> x) xs))
			(++ 
			  (Cons x (filter (== x) xs))
				(qsort (filter (< x) xs))
			)
		)
	)
)

(let map
  (\ [ _, [] ] [])
	(\ [ fun, (Cons x xs) ] (Cons (fun x) (map fun xs)))
)

(main
	(var x [9, 2, 8, 0])
	(var res (qsort x))
	(print (foldl ++ "" (map (++ " ") (map show res))))
)

