(let foldl
  (\ [ _, val, [] ] val)
	(\ [ fun, val, (Cons x xs) ] (foldl fun (fun val x) xs))
)

(let map
  (\ [ _, [] ] [])
	(\ [ fun, (Cons x xs) ] (Cons (fun x) (map fun xs)))
)

(let head
  (\ [(Cons x _)] x)
)

(let tail
  (\ [(Cons _ xs)] xs)
)

(let transpose
	(\ [(Cons [] _)] [])
	(\ [x] 
	  (Cons (map head x) (transpose (map tail x)))
	)
)

(let scalarProd
	(\ [[], []] 0)
	(\ [(Cons x xs), (Cons y ys)] (+ (* x y) (scalarProd xs ys)))
)

(let getRow
	(\ [_, []] [])
	(\ [row, (Cons x xs)] (Cons (scalarProd row x) (getRow row xs)))
)

(let matProdAux
	(\ [[], _] [])
	(\ [(Cons row rest), b] (Cons (getRow row b) (matProdAux rest b)))
)

(let matProd
	(\ [a, b] (matProdAux a (transpose b)))
)

(let showList
  (\ [ _, [] ] "")
	(\ [ _, [x] ] (show x))
  (\ [sep, (Cons x xs) ]
	  (++ (show x) (++ sep (showList sep xs)))
	)
)

(main
	(var m1
	  [
		  [1, 2, 3],
			[4, 5, 6]
    ]
	)
	(var m2
	  [
		  [7, 8],
			[9, 10],
			[11, 12]
    ]
	)
	(var res (matProd m1 m2))
	(print (foldl (\ [a, b] (++ a (++ ['\n'] b))) "" (map (showList ", ") res)))
)
